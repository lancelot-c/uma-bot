name: Reveal
on:
  workflow_dispatch:
  schedule:
    # Run every day at 00:00 UTC
    - cron: '0 0 * * *'

jobs:
  playwright:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
      pull-requests: write

    steps:
    
    - name: Checkout uma-bot repo
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        path: uma-bot
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*


    - name: Install dependencies # because isRevealPhase needs viem
      run: cd uma-bot && npm install
    - name: Install tsx globally to run ts files independently
      run: npm i -g tsx



    # - name: Reveal
    #   id: reveal
    #   continue-on-error: true
    #   run: tsx ./uma-bot/smart-contract-calls/reveal.ts
    #   # run: echo "revelead='$(tsx ./uma-bot/smart-contract-calls/reveal.ts)'" >> "$GITHUB_OUTPUT"
    #   env:
    #     PRIVATE_KEYS: ${{ secrets.PRIVATE_KEYS }}
    #     RPC_URL: ${{ secrets.RPC_URL }}
    #     UPSTASH_URL: ${{ secrets.UPSTASH_URL }}
    #     UPSTASH_API_KEY: ${{ secrets.UPSTASH_API_KEY }}
    #     DISCORD_CHANNEL_DEV_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_DEV_WEBHOOK_URL }}
    #     ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

    # - name: Post summary on Discord
    #   if: steps.reveal.outputs.revelead == '1'
    #   continue-on-error: true # See https://stackoverflow.com/a/70048004
    #   run: tsx ./uma-bot/smart-contract-calls/summary.ts
    #   env: # Set the secret as an environment variable
    #     PRIVATE_KEYS: ${{ secrets.PRIVATE_KEYS }}
    #     RPC_URL: ${{ secrets.RPC_URL }}
    #     UPSTASH_URL: ${{ secrets.UPSTASH_URL }}
    #     UPSTASH_API_KEY: ${{ secrets.UPSTASH_API_KEY }}
    #     DISCORD_CHANNEL_GENERAL_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_GENERAL_WEBHOOK_URL }}
    #     DISCORD_CHANNEL_HISTORY_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_HISTORY_WEBHOOK_URL }}
    #     DISCORD_CHANNEL_DEV_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_DEV_WEBHOOK_URL }}
    #     ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }} 


    # - name: Check if new voting round & if yes, create fresh answers file
    #   id: checkIfNewVotingRound
    #   if: steps.reveal.outputs.revelead != '1'
    #   continue-on-error: true # Make sure we continue the job if this script fails
    #   run: cd uma-bot && tsx ./smart-contract-calls/checkNewVotingRound.ts
    #   env:
    #     RPC_URL: ${{ secrets.RPC_URL }}
    #     DISCORD_CHANNEL_DEV_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_DEV_WEBHOOK_URL }}
    #     DISCORD_CHANNEL_HISTORY_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_HISTORY_WEBHOOK_URL }}
    #     ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }} 
    #     GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}


    # - name: Install Playwright Browsers
    #   if: steps.reveal.outputs.revelead != '1' && steps.checkIfNewVotingRound.outputs.votingRound != '0'
    #   continue-on-error: true
    #   run: cd uma-bot && npx playwright install --with-deps chromium


    # - name: Enrich answers file with questions and most probable answers
    #   if: steps.reveal.outputs.revelead != '1' && steps.checkIfNewVotingRound.outputs.votingRound != '0'
    #   continue-on-error: true # See https://stackoverflow.com/a/70048004
    #   run: 'cd uma-bot && xvfb-run npx playwright test ./test/enrich-answers.spec.ts'
    #   env: # Set the secrets as an environment variable
    #     RPC_URL: ${{ secrets.RPC_URL }}
    #     UPSTASH_URL: ${{ secrets.UPSTASH_URL }}
    #     UPSTASH_API_KEY: ${{ secrets.UPSTASH_API_KEY }}
    #     DISCORD_EMAIL: ${{ secrets.DISCORD_EMAIL }}
    #     DISCORD_PASSWORD: ${{ secrets.DISCORD_PASSWORD }}
    #     ATTEMPT_DISCORD_LOGIN: ${{ secrets.ATTEMPT_DISCORD_LOGIN }}
    #     DISCORD_CHANNEL_GENERAL_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_GENERAL_WEBHOOK_URL }}
    #     DISCORD_CHANNEL_HISTORY_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_HISTORY_WEBHOOK_URL }}
    #     DISCORD_CHANNEL_DEV_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_DEV_WEBHOOK_URL }}
    #     TRUSTED_USERS: ${{ secrets.TRUSTED_USERS }}
    #     ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}


    # - name: Push answers file
    #   if: steps.reveal.outputs.revelead != '1' && steps.checkIfNewVotingRound.outputs.votingRound != '0'
    #   uses: dmnemec/copy_file_to_another_repo_action@main
    #   env:
    #     API_TOKEN_GITHUB: ${{ secrets.GH_ACCESS_TOKEN }}
    #   with:
    #     source_file: './uma-bot/test-data/${{ steps.checkIfNewVotingRound.outputs.votingRound }}.json'
    #     destination_repo: 'lancelot-c/uma-answers'
    #     destination_branch: 'answers'
    #     destination_folder: 'voting-rounds'
    #     user_email: 'uma-bot@users.noreply.github.com'
    #     user_name: 'uma-bot'
    #     commit_message: 'Answers for voting round ${{ steps.checkIfNewVotingRound.outputs.votingRound }}'


    - name: Create pull request & notify all the stakeholders
      if: steps.reveal.outputs.revelead != '1' && steps.checkIfNewVotingRound.outputs.votingRound != '0'
      run: cd uma-bot && tsx ./smart-contract-calls/notifyNewVotingRound.ts
      env:
        RPC_URL: ${{ secrets.RPC_URL }}
        DISCORD_CHANNEL_DEV_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_DEV_WEBHOOK_URL }}
        DISCORD_CHANNEL_HISTORY_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_HISTORY_WEBHOOK_URL }}
        DISCORD_CHANNEL_VOTING_COMMITTEE_WEBHOOK_URL: ${{ secrets.DISCORD_CHANNEL_VOTING_COMMITTEE_WEBHOOK_URL }}
        GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        VOTING_COMMITTEE_BOT_TOKEN: ${{ secrets.VOTING_COMMITTEE_BOT_TOKEN }}
